- Password verification on User Add
- Guest speaker in event model
- 404 page if route doesn't exist (react router)
- sort search results by Category
- parse Place phone number and Event date
- Email notification to slack channel instead?
- Change password
- Fix search bar for numbers

eventually to make the layout responsive, we should use max/min height and width css

places and users:
ACTIVE
INACTIVE

only display and pull from ACTIVE


add hidden class forlayout stuff

if somethings not working right and its a reserved tag, try doing it with a div

css tricks a guide to flexbox
the way it's lined out, it's all in rows. to get columns, it's turned 90 degrees. to space out columns is not ideal, can get around it by
making a column and putting rows in columns
by default, everything is flex-direction: row


          {/* //when something's at medium size, the width of the column will be 4, when it's small size it's 3. There's also xs */}

          //align self to override alignitems for specific item in flex
          //flex is all in proportion to other flex values
          //flex is shorthand for setting flex-grow and flex-shrink to 1
          //flex-basis takes pixels; in an ideal world, this item would be this size
          default: when there is extra room, don't do anything
          flex-grow: take up the extra room
          it's not about the size of the items; it's about the size of the extra space
          the default flex-shrink is 1; when there's not enough room, just evenly divide amongst yourselves
          flex: first you say the grow, then the shrink, then the basis

//currently, a user can only RSVP if they have already voted. we can change this later

when a user RSVPs:

if(rsvp){
    update user table that RSVP is true
    update guestlist where eventId matches and user is null
}else{
  if (user ID is in the guestList){
    update user table that RSVP is false
    update entry in guestlist with their userId and eventId
  }
}


when an event is fetched and place 1/place 2/winner are by ID
Bevent.findOne({
  order: [['date', 'DESC']]
  include: [{
    required : false,
    model: Places
  }]
})
.then(function(combo) {
  res.json(combo: combo)
});


//ideally
when a user votes
 PUT user.voted = true
 POST guestlist -- userID = null, vote = 1 or 2

when a user RSVPs
  PUT user.rsvp = true/false
  PUT guestlist -- userID = userID/null

when votes are counted
  findAll guestlists where vote = 1
  findall guestLists where vote = 2
  winner = whichever has more findAll results
  PUT guestlist winner
